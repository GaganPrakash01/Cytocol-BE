using Cytocol.Domain.Exceptions;
using Cytocol.Domain.Shared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Security;

namespace Cytocol.Shared.Password
{
    public class BCryptPasswordManager : IPasswordManager
    {
        /// <summary>
        /// Generates a random salt value
        /// </summary>
        /// <returns>salt value as string</returns>
        public string GenerateSalt()
        {
            //Salt value must be minimum 16 bytes, which is the default length of the salt generated by below function
            return BCrypt.Net.BCrypt.GenerateSalt(10);
        }

        /// <summary>
        /// Hashes the Password entered by user
        /// </summary>
        /// <param name="password">Plaintext password entered by user</param>
        /// <param name="salt">random 16-byte value to improve security</param>
        /// <returns>Hashed Password as a string</returns>
        public string HashPassword(string password, string salt)
        {
            return BCrypt.Net.BCrypt.HashPassword(password, salt);
        }

        /// <summary>
        /// Verifies if the entered Password is correct by comparing with the Hashed Password
        /// </summary>
        /// <param name="plainPassword">Plaintext Password entered by user</param>
        /// <param name="hashPassword">Hashed Password stored in the database</param>
        /// <returns>boolean value indicating if the entered password is the same as hashed password</returns>
        public bool VerifyPassword(string plainPassword, string hashPassword)
        {
            return BCrypt.Net.BCrypt.Verify(plainPassword, hashPassword);
        }

        /// <summary>
        /// Generates a random password. An Exception will be thrown if password length is given less than 8 characters.
        /// </summary>
        /// <param name="passwordLength">Length of the generated password. The default value is 8 characters</param>
        /// <returns>Randomly generated password as a string</returns>
        /// <exception cref="InvalidPasswordLengthException">Throws an exception if password length is lesser than 8 characters</exception>
        public string GenerateRandomPassword(int passwordLength = 8)
        {
            if (passwordLength < 8)
            {
                throw new InvalidPasswordLengthException();
            }

            //Below method returns a random password having minimum 1 non-alphanumeric character
            return Membership.GeneratePassword(passwordLength, 1);
        }
    }
}
